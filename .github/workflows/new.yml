name: Build and deploy2

on:
  push:
    paths:
     # - "tomcat-backend-rest/**"
     # - "afklm-tomcat-reference/**"
  workflow_dispatch:

env:
  # default java version
  # JAVA_VERSION: 1.8
  # needed for webapp deployment
  #AZURE_WEBAPP_NAME: fmv-weu-001  # set this to your application's name
  #AZURE_WEBAPP_PACKAGE_PATH: '${{github.workspace }}/target/' # set this to the path to your web app project
  # ACR data
  ACR_ADDR: testregistry6.azurecr.io
  ACR_NAME: testregistry6
  ACR_ADMIN_USER: testregistry6
  # docker image stuff
  DOCKER_CMD: "sudo docker"
  CBS_WEB_IMAGE: python-app
  CBS_WS_WEB: python-app
  CBS_BATCH_IMAGE: python-app
  # needed to access AKS
  CLUSTER_NAME: k8-cluster
  CLUSTER_RG: k8-cluster
  NAMESPACE: default
  # keyvault parameters
  KEYVAULTNAME: testKVtomcat2

jobs:
# creating and testing release version publish
#  release:
#    needs: build-and-package
#    runs-on: ubuntu-latest
#    environment: development
#    steps:
#    - name: Create Draft Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
#      with:
#        tag_name: 1.1.15
#        release_name: tomcat-backend
#        draft: true
#        prerelease: false

    # #- uses: actions/upload-release-asset@v1.0.1
    # #  env:
    # #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # #  with:
    # #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./my-artifact.zip
    #     asset_name: my-artifact.zip
    #     asset_content_type: application/zip

#    - uses: eregon/publish-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        release_id: ${{ steps.create_release.outputs.id }}


  build-and-package:
    runs-on: [ ubuntu-18.04 ]
    steps:
      # standard GitHub Action
      - uses: actions/checkout@master
      #  with:
      #    ref: master

      # Set up the right JDK (project dependent)
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{ env.JAVA_VERSION }}
    
      # Package the application
      - name: Install Python dependencies
 #       run : pip install -r requirements.txt
      #  run: chmod 777 ./mvnw && ./mvnw -B clean package -Dmaven.repo.local=dependencies/repository  -DskipTests --file tomcat-backend-rest/pom.xml
      
      # Delete artifacts
      #- name: Delete artifacts
      #  run: rm -rf tomcat-backend-rest/target/*.war
        
      # Store the application artifact
#      - name: Java package artifact upload
#        uses: actions/upload-artifact@v2
#        with:
#          name: CBS-cbsWeb
#          path: tomcat-backend-rest/target/*.war
      - run: ls -ltra
       # Install pack CLI
      - name: Install buildpack
        run: |
          (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.18.1/pack-v0.18.1-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
      # build image
      - name: Run buildpack Python
        run: |
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --buildpack 'gcr.io/paketo-buildpacks/python' --builder paketobuildpacks/builder:base
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --env BP_PIP_VERSION=21.3.1 --buildpack 'gcr.io/paketo-buildpacks/python' --buildpack 'paketo-buildpacks/pip-install' --builder paketobuildpacks/builder:base
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --env BP_PIP_VERSION=21.3.1 --buildpack 'gcr.io/paketo-buildpacks/python' --buildpack 'paketo-buildpacks/python-start' --builder paketobuildpacks/builder:base --path ./src/
          pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --buildpack 'gcr.io/paketo-buildpacks/python' --builder paketobuildpacks/builder:base --path ./python/pip/
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --env BP_PIP_VERSION=21.3.1 --buildpack 'gcr.io/paketo-buildpacks/python' --builder paketobuildpacks/builder:base --path ./src/
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --buildpack 'gcr.io/paketo-buildpacks/python' --buildpack 'paketo-buildpacks/python' --builder paketobuildpacks/builder:base --path ./src/
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --env BP_JVM_VERSION=8 --buildpack 'gcr.io/paketo-buildpacks/python' --buildpack 'paketo-buildpacks/python' --builder paketobuildpacks/builder:base --path tomcat-backend-rest/target/*.war
          #pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} --path cbsWeb/target/*.jar --builder paketobuildpacks/builder:base --verbose
            # authenticate to registry
      - name: Login to ACR
        run: docker login -u ${{ env.ACR_ADMIN_USER }} -p ${{ secrets.ACR_PASSWORD }} ${{ env.ACR_ADDR }}

      # push image to registry
      - name: Tag and push python image
        run: |
          docker tag ${{ env.ACR_ADDR }}/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} ${{ env.ACR_ADDR }}/${{ env.CBS_WEB_IMAGE }}:latest
          docker push ${{ env.ACR_ADDR }}/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }}
          docker push ${{ env.ACR_ADDR }}/${{ env.CBS_WEB_IMAGE }}:latest
      #- name: Run buildpack cbsBatch 
      #  run: |
      #    pack build ${{ env.ACR_NAME }}.azurecr.io/${{ env.CBS_BATCH_IMAGE}}:${{ github.sha }} --path cbsWsWeb/target/*.jar --builder paketobuildpacks/builder:base --verbose
      #      # authenticate to registry
      # push image to registry
      #- name: Tag and push Cbsbatch image
      #  run: |
      #    docker tag ${{ env.ACR_ADDR }}/${{ env.CBS_BATCH_IMAGE }}:${{ github.sha }} ${{ env.ACR_ADDR }}/${{ env.CBS_BATCH_IMAGE }}:latest
      #    docker push ${{ env.ACR_ADDR }}/${{ env.CBS_BATCH_IMAGE}}:${{ github.sha }}
      #    docker push ${{ env.ACR_ADDR }}/${{ env.CBS_BATCH_IMAGE }}:latest

  deploy-python:
    needs: build-and-package 
    runs-on: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@master

      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          environment: development

      # point to the team's AKS cluster
      - name: Set AKS cluster
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RG }}

      # Create the pull secret needed to access the repository
      - name: Create pull secret
        uses: Azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          container-registry-url: ${{ env.ACR_ADDR }}
          container-registry-username: ${{ env.ACR_NAME }}
          container-registry-password: ${{ secrets.ACR_PASSWORD }}
          secret-name: ${{ env.ACR_ADDR }}-pull-secret

      # install helm
      - uses: azure/setup-helm@v1
        with:
          version: 'latest' # default is latest stable
      
      # Bake and deploy the application manifests
      #
      - name: Get User Assigned Managed Identity
        id: getUserAssignedIdentity
        run: |
            echo "::set-output name=user_assigned_identity::`az aks show -g ${{ env.CLUSTER_RG }}  -n ${{ env.CLUSTER_NAME }} --query identityProfile.kubeletidentity.clientId`"
            echo "::add-mask::`az aks show -g ${{ env.CLUSTER_RG }}  -n ${{ env.CLUSTER_NAME }} --query identityProfile.kubeletidentity.clientId`"
  
      - name: bakeManifests
        uses: azure/k8s-bake@v1
        id: bakeManifests
        with:
          renderEngine: helm
          helmChart: ./charts/ws/
          overrideFiles: ./charts/ws/values.yaml
          overrides: |     
            config.keyVault.resourceGroup: ${{ env.CLUSTER_RG }} 
            config.keyVault.keyVaultName: ${{ env.KEYVAULTNAME }} 
            config.keyVault.tenantId: ${{ secrets.AZURE_TENANTID }}
          helm-version: 'latest'
          silent: 'true'
          #releaseName: prototype

      #- name: Deploy secret store manifests
      #  uses: Azure/k8s-deploy@v1
      #  with:
      #    manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
    
      # deploy the kubernetes resources
      - uses: Azure/k8s-deploy@v1.2
        with:
          namespace: ${{ env.NAMESPACE }}
          #validate: false
          manifests: ${{ steps.bakeManifests.outputs.manifestsBundle }}
          images: |
            ${{ env.ACR_ADDR }}/${{ env.CBS_WEB_IMAGE }}:${{ github.sha }} 
          imagepullsecrets: |
            ${{ env.ACR_ADDR }}-pull-secret
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
